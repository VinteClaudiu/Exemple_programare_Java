/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UDP;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import org.apache.derby.jdbc.ClientDataSource;


public class UDPServer extends javax.swing.JFrame {

    private boolean startat;
    private DatagramSocket s;
    private Connection c;
    
    public UDPServer() {
        initComponents();
        
        try{
            ClientDataSource ds = new ClientDataSource();
            ds.setServerName("localhost");
            ds.setPortNumber(1527);
            ds.setDatabaseName("stundent");
            ds.setUser("server");
            ds.setPassword("server");
            c = ds.getConnection();
        }
        catch(Exception ex){
            jtaOut.append(ex+"\nVerificati startarea serverului DB!\n");
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaOut = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jButton1.setText("Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jtaOut.setEditable(false);
        jtaOut.setColumns(20);
        jtaOut.setRows(5);
        jScrollPane1.setViewportView(jtaOut);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 348, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if(c!=null){
            try{c.close();}catch(Exception ex){}
        }
        if(s!=null){
            try{s.close();}catch(Exception ex){}
        }
    }//GEN-LAST:event_formWindowClosing

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        if(!startat){
            try{
                s = new DatagramSocket(8888);
                Thread fir = new Thread(new Runnable() {

                    @Override
                    public void run() {
                        raspuns();
                    }
                });
                fir.start();
                startat=true;
                jtaOut.append("Conexiune socket UDP pornita\n");
            }
            catch(Exception ex){
                JOptionPane.showMessageDialog(this, ex.toString());
            }
        }
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void raspuns(){
        while(true){
            try{
                byte[] bIn = new byte[1000];
                DatagramPacket pIn = new DatagramPacket(bIn, bIn.length);
                s.receive(pIn);
                
                ByteArrayInputStream in = new ByteArrayInputStream(pIn.getData());
                ObjectInputStream fin = new ObjectInputStream(in);
                String numeStudent = (String)fin.readObject();
                fin.close();
                
                Statement sttm = c.createStatement
                        (ResultSet.TYPE_SCROLL_SENSITIVE,
                        ResultSet.CONCUR_UPDATABLE);
                ResultSet r = sttm.executeQuery
                        ("select * from studenti where nume like '%"+numeStudent+"%'");
                r.last();
                int n = r.getRow();
                jtaOut.append("Am fost extrase din baza de date " + n + " inregistrari\n");
                
                ByteArrayOutputStream out = new ByteArrayOutputStream();
                ObjectOutputStream fout = new ObjectOutputStream(out);
                fout.writeObject(new Integer(n));
                
                r.beforeFirst();
                while(r.next()){
                    Student stud = new Student();
                    stud.setNume(r.getString("Nume"));
                    stud.setGrupa(r.getInt(2));
                    stud.setNotaPoo(r.getInt("NotaPOO"));
                    stud.setNotaPaw(r.getInt(4));
                    stud.setNotaJava(r.getInt(5));
                    fout.writeObject(stud);
                }
                sttm.close();
                byte[] bOut = out.toByteArray();
//                DatagramPacket pOut = new DatagramPacket(bOut, bOut.length, 
//                        pIn.getAddress(), pIn.getPort());
                jtaOut.append(pIn.getAddress() + " : " + pIn.getPort() + "\n");
                DatagramPacket pOut = new DatagramPacket(bOut, bOut.length,
                        pIn.getAddress(), pIn.getPort());
                fout.close();
                s.send(pOut);
            }
            catch(Exception ex){
                jtaOut.append(ex+"\n");
            }
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new UDPServer().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jtaOut;
    // End of variables declaration//GEN-END:variables
}
